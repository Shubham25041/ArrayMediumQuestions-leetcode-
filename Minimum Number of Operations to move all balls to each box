class Solution {
public:
    vector<int> minOperations(string boxes) {
        int n = boxes.size();

        vector<int>ans;
        for(int i=0; i<n; i++){
            int sum = 0;
            for(int j=0; j<n; j++){
                if(boxes[j] == '1'){
                    if(i != j){
                        int num = abs(j - i);
                        sum += num;
                    }
                }
            }
            ans.push_back(sum);
        }

        return ans;


    }
};

                                                                                                // 2nd Approach 

class Solution {
public:
    vector<int> minOperations(string boxes) {
        int n = boxes.length();
        vector<int> left(n, 0), right(n, 0);
        int pre = 0;
        int ones = 0;
        for (int i = 0; i < n; i++) {
            left[i] = pre;
            if (boxes[i] == '1') {
                ones++;
            }
            pre += ones;
            
        }

        pre = 0;
        ones = 0;
        for (int i = n - 1; i >= 0; i--) {
            right[i] = pre;
            if (boxes[i] == '1') {
                ones++;
            }
            pre += ones;
        }

        vector<int> result;
        for (int i = 0; i < n; i++) {
            result.push_back(left[i] + right[i]);
        }

        return result;
    }
};
